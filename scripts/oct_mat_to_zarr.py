"""
JPEG2000 to OME-ZARR
====================

This script converts JPEG2000 files generated by MBF-Neurolucida into
a pyramidal OME-ZARR hierarchy. It does not recompute the image pyramid
but instead reuse the JPEG2000 levels (obtained by wavelet transform).

dependencies:
    numpy
    scipy
    zarr
    nibabel
    cyclopts
"""
import cyclopts
import zarr
import ast
import numcodecs
import uuid
import os
import math
import h5py
import numpy as np
import nibabel as nib
from scipy.io import loadmat
from typing import Optional, Union, Sequence
from warnings import warn
from contextlib import contextmanager

app = cyclopts.App(help_format="markdown")


"""
Image medium: 60% TDE
Center Wavelength: 1294.84nm
Axial resolution: 4.9um
Lateral resolution: 4.92um
FOV: 3x3mm
Voxel size: 3x3x3um
Depth focus range: 225um
Number of focuses: 2
Focus #: 2
Slice thickness: 450um.
Number of slices: 75
Slice #:23
Modality: dBI
"""


def automap(func):
    """Decorator to automatically map the array in the mat file"""

    def wrapper(inp, out, **kwargs):
        if out is None:
            out = os.path.splitext(inp)
            out += '.nii.zarr' if kwargs.get('nii', False) else '.ome.zarr'
        kwargs['nii'] = kwargs.get('nii', False) or out.endswith('.nii.zarr' )
        with mapmat(inp) as dat:
            return func(dat, out, **kwargs)

    return wrapper


@app.default
def convert(
    inp: str,
    out: str = None,
    *,
    chunk: int = 1024,
    compressor: str = 'blosc',
    compressor_opt: str = "{}",
    nii: bool = False,
    orientation: str = 'RAS',
    center: bool = True,
    unit: str = 'um',
    voxel_size: Optional[Union[float, Sequence[float]]] = None,
    resolution_axial: Optional[float] = None,
    resolution_lateral: Optional[float] = None,
    field_of_view: Optional[Union[float, Sequence[float]]] = None,
    slice_tickness: Optional[float] = None,
    nb_slices: Optional[int] = None,
    nb_focus: Optional[int] = None,
    center_wavelength: Optional[float] = None,
    medium: Optional[str] = None,
    modality: Optional[str] = None,
):
    """
    This command converts OCT volumes stored in raw matlab files
    into a pyramidal OME-ZARR (or NIfTI-Zarr) hierarchy.

    Parameters
    ----------
    inp
        Path to the input mat file
    out
        Path to the output Zarr directory [<INP>.ome.zarr]
    chunk
        Output chunk size
    compressor : {blosc, zlib, raw}
        Compression method
    compressor_opt
        Compression options
    max_load
        Maximum input chunk size
    nii
        Convert to nifti-zarr. True if path ends in ".nii.zarr"
    orientation
        Orientation of the slice
    center
        Set RAS[0, 0, 0] at FOV center
    unit : {mm, um, nm}
        Unit of all spatial values (voxel_size, wavelength, etc.)
    voxel_size
        Voxel size, in `units`.
    resolution_axial
        Voxel size, in `units`
    resolution_lateral
        Voxel size, in `units`
    field_of_view
        Field of view of the camera
    slice_tickness
        Thickness of each physical slice
    nb_slices
        Total number of physical slices
    nb_focus
        Number of focus planes
    center_wavelength
        Wavelength, in `units`
    medium
        Description of the imaging medium
    modality
        Description of the modality

    """
    pass


@contextmanager
def mapmat(fname):
    try:
        f = h5py.File(fname, 'r')
    except Exception:
        f = loadmat(fname)
    keys = list(f.keys())
    if len(keys) > 1:
        key = keys[0]
        warn(f'More than one key in .mat, arbitrarily loading "{key}"')
    yield f.get(key)
    if hasattr(f, 'close'):
        f.close()


if __name__ == "__main__":
    app()

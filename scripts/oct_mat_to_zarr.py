"""
(OCT) Matlab to OME-ZARR
========================

This script converts Matlab files generated by the MGH in-house OCT pipeline
into a pyramidal OME-ZARR hierarchy.

dependencies:
    numpy
    scipy
    zarr
    nibabel
    cyclopts
"""
import cyclopts
import zarr
import ast
import re
import os
import math
import json
import h5py
import numpy as np
import nibabel as nib
from itertools import product
from functools import wraps
from scipy.io import loadmat
from warnings import warn
from contextlib import contextmanager

from utils import (
    ceildiv, make_compressor, convert_unit, to_ome_unit, to_nifti_unit,
    orientation_to_affine, center_affine
)

app = cyclopts.App(help_format="markdown")


def automap(func):
    """Decorator to automatically map the array in the mat file"""

    @wraps(func)
    def wrapper(inp, out, **kwargs):
        if out is None:
            out = os.path.splitext(inp)
            out += '.nii.zarr' if kwargs.get('nii', False) else '.ome.zarr'
        kwargs['nii'] = kwargs.get('nii', False) or out.endswith('.nii.zarr')
        with mapmat(inp) as dat:
            return func(dat, out, **kwargs)

    return wrapper


@app.default
@automap
def convert(
    inp: str,
    out: str = None,
    *,
    meta: str = None,
    chunk: int = 128,
    compressor: str = 'blosc',
    compressor_opt: str = "{}",
    max_load: int = 128,
    nii: bool = False,
    orientation: str = 'RAS',
    center: bool = True,
):
    """
    This command converts OCT volumes stored in raw matlab files
    into a pyramidal OME-ZARR (or NIfTI-Zarr) hierarchy.

    Parameters
    ----------
    inp
        Path to the input mat file
    out
        Path to the output Zarr directory [<INP>.ome.zarr]
    meta
        Path to the metadata file
    chunk
        Output chunk size
    compressor : {blosc, zlib, raw}
        Compression method
    compressor_opt
        Compression options
    max_load
        Maximum input chunk size
    nii
        Convert to nifti-zarr. True if path ends in ".nii.zarr"
    orientation
        Orientation of the volume
    center
        Set RAS[0, 0, 0] at FOV center

    """

    if isinstance(compressor_opt, str):
        compressor_opt = ast.literal_eval(compressor_opt)

    # Write OME-Zarr multiscale metadata
    if meta:
        print('Write JSON')
        meta_json = make_json(meta)
        path_json = '.'.join(out.split('.')[:-2]) + '.json'
        with open(path_json, 'r') as f:
            json.dump(meta_json, f, indent=4)
        vx = meta_json['PixelSize']
        unit = meta_json['PixelSizeUnits']
    else:
        vx = [1] * 3
        unit = 'um'

    # Prepare Zarr group
    omz = zarr.storage.DirectoryStore(out)
    omz = zarr.group(store=omz, overwrite=True)

    # Prepare chunking options
    opt = {
        'chunks': [chunk] * 3,
        'dimension_separator': r'/',
        'order': 'F',
        'dtype': np.dtype(inp.dtype).str,
        'fill_value': None,
        'compressor': make_compressor(compressor, **compressor_opt),
    }

    nk = ceildiv(inp.shape[0], max_load)
    nj = ceildiv(inp.shape[1], max_load)
    ni = ceildiv(inp.shape[2], max_load)
    nblevels = int(math.ceil(math.log2(max_load)))

    # create all arrays in the group
    shape_level = inp.shape
    for level in range(nblevels):
        omz.create_dataset(str(level), shape=shape_level, **opt)
        shape_level = [ceildiv(x, 2) for x in shape_level]

    # iterate across input chunks
    pct = 0
    for i, j, k in product(range(ni), range(nj), range(nk)):
        pct = int(math.ceil((i*j*k + 1) / (ni*nj*nk)))
        print(pct, '%', end='\r')

        chunk_size = max_load
        inp_chunk = inp[
            k*chunk_size:(k+1)*chunk_size.
            i*chunk_size:(i+1)*chunk_size,
            j*chunk_size:(j+1)*chunk_size,
        ]

        for level in range(nblevels):
            out_level = omz[str(level)]
            # save current chunk
            out_level[
                k*chunk_size:(k+1)*chunk_size.
                i*chunk_size:(i+1)*chunk_size,
                j*chunk_size:(j+1)*chunk_size,
            ] = inp_chunk
            # ensure divisible by
            inp_chunk = inp_chunk[
                :2*(inp_chunk.shape[0]//2),
                :2*(inp_chunk.shape[1]//2),
                :2*(inp_chunk.shape[2]//2),
            ]
            # mean pyramid (average each 2x2x2 patch)
            inp_chunk = (
                inp_chunk[0::2, 0::2, 0::2] +
                inp_chunk[0::2, 0::2, 1::2] +
                inp_chunk[0::2, 1::2, 0::2] +
                inp_chunk[0::2, 1::2, 1::2] +
                inp_chunk[1::2, 0::2, 0::2] +
                inp_chunk[1::2, 0::2, 1::2] +
                inp_chunk[1::2, 1::2, 0::2] +
                inp_chunk[1::2, 1::2, 1::2]
            ) / 8
            chunk_size = chunk_size // 2
    print('')

    # Write OME-Zarr multiscale metadata
    print('Write metadata')
    ome_unit = to_ome_unit(unit)
    multiscales = [{
        'version': '0.4',
        'axes': [
            {"name": "z", "type": "space", "unit": ome_unit},
            {"name": "y", "type": "space", "unit": ome_unit},
            {"name": "x", "type": "space", "unit": ome_unit}
        ],
        'datasets': [],
        'type': '2x2x2 mean window',
        'name': '',
    }]

    for n in range(nblevels):
        multiscales[0]['datasets'].append({})
        level = multiscales[0]['datasets'][-1]
        level["path"] = str(n)

        # With a moving window, the scaling factor is exactly 2, and
        # the edges of the top-left voxel are aligned
        level["coordinateTransformations"] = [
            {
                "type": "scale",
                "scale": [
                    (2**n)*vx[0],
                    (2**n)*vx[1],
                    (2**n)*vx[2],
                ]
            },
            {
                "type": "translation",
                "translation": [
                    (2**n - 1)*vx[0]*0.5,
                    (2**n - 1)*vx[1]*0.5,
                    (2**n - 1)*vx[2]*0.5,
                ]
            }
        ]
    multiscales[0]["coordinateTransformations"] = [
        {
            "scale": [1.0] * 3,
            "type": "scale"
        }
    ]
    omz.attrs["multiscales"] = multiscales

    if not nii:
        print('done.')
        return

    # Write NIfTI-Zarr header
    # NOTE: we use nifti2 because dimensions typically do not fit in a short
    # TODO: we do not write the json zattrs, but it should be added in
    #       once the nifti-zarr package is released
    shape = list(reversed(omz['0'].shape))
    affine = orientation_to_affine(orientation, *vx[::-1])
    if center:
        affine = center_affine(affine, shape[:3])
    header = nib.Nifti2Header()
    header.set_data_shape(shape)
    header.set_data_dtype(omz['0'].dtype)
    header.set_qform(affine)
    header.set_sform(affine)
    header.set_xyzt_units(nib.nifti1.unit_codes.code[to_nifti_unit(unit)])
    header.structarr['magic'] = b'nz2\0'
    header = np.frombuffer(header.structarr.tobytes(), dtype='u1')
    opt = {
        'chunks': [len(header)],
        'dimension_separator': r'/',
        'order': 'F',
        'dtype': '|u1',
        'fill_value': None,
        'compressor': None,
    }
    omz.create_dataset('nifti', data=header, shape=shape, **opt)
    print('done.')


@contextmanager
def mapmat(fname):
    try:
        f = h5py.File(fname, 'r')
    except Exception:
        f = loadmat(fname)
    keys = list(f.keys())
    if len(keys) > 1:
        key = keys[0]
        warn(f'More than one key in .mat, arbitrarily loading "{key}"')
    yield f.get(key)
    if hasattr(f, 'close'):
        f.close()


def make_json(oct_meta):

    """
    Expected input:
    ---------------
    Image medium: 60% TDE
    Center Wavelength: 1294.84nm
    Axial resolution: 4.9um
    Lateral resolution: 4.92um
    FOV: 3x3mm
    Voxel size: 3x3x3um
    Depth focus range: 225um
    Number of focuses: 2
    Focus #: 2
    Slice thickness: 450um.
    Number of slices: 75
    Slice #:23
    Modality: dBI
    """

    def parse_value_unit(string, n=None):
        number = r'-?(\d+\.?\d*|\d*\.?\d+)(E-?\d+)?'
        value = 'x'.join([number]*(n or 1))
        match = re.fullmatch(r'(?P<value>' + value + r')(?P<unit>\w*)', string)
        value, unit = match.group('value'), match.group('unit')
        value = list(map(float, value.split('x')))
        if n is None:
            value = value[0]
        return value, unit

    meta = {
        'BodyPart': 'BRAIN',
        'Environment': 'exvivo',
        'SampleStaining': 'none',
    }

    for line in oct_meta.split():
        if ':' not in line:
            continue

        key, value = line.split(':')
        key, value = key.strip(), value.strip()

        if key == 'Image medium':
            parts = value.split()
            if 'TDE' in parts:
                parts[parts.index('TDE')] = "2,2' Thiodiethanol (TDE)"
            meta['SampleMedium'] = ' '.join(parts)

        elif key == 'Center Wavelength':
            value, unit = parse_value_unit(value)
            meta['Wavelength'] = value
            meta['WavelengthUnit'] = unit

        elif key == 'Axial resolution':
            value, unit = parse_value_unit(value)
            meta['ResolutionAxial'] = value
            meta['ResolutionAxialUnit'] = unit

        elif key == 'Lateral resolution':
            value, unit = parse_value_unit(value)
            meta['ResolutionLateral'] = value
            meta['ResolutionLateralUnit'] = unit

        elif key == 'Voxel size':
            value, unit = parse_value_unit(value, n=3)
            meta['PixelSize'] = value
            meta['PixelSizeUnits'] = unit

        elif key == 'Depth focus range':
            value, unit = parse_value_unit(value)
            meta['DepthFocusRange'] = value
            meta['DepthFocusRangeUnit'] = unit

        elif key == 'Number of focuses':
            value, unit = parse_value_unit(value)
            meta['FocusCount'] = int(value)

        elif key == 'Slice thickness':
            value, unit = parse_value_unit(value)
            unit = convert_unit(value, unit[:-1], 'u')
            meta['SliceThickness'] = value

        elif key == 'Number of slices':
            value, unit = parse_value_unit(value)
            meta['SliceCount'] = int(value)

        elif key == 'Modality':
            meta['OCTModality'] = value

        else:
            continue

    return meta


if __name__ == "__main__":
    app()

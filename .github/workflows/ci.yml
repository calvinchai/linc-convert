name: CI
on: pull_request

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.10", "3.11", "3.12", "3.13"]
        python-version: ["3.13"]
        poetry-version: ["1.8.4"]
        # glymur needs dynamic library on macos and windows, and causing error
        os: [ubuntu-22.04, macos-latest, windows-latest]
        # os: [ubuntu-22.04]
        
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      # - name: Setup OpenJPEG on macOS
      #   if: matrix.os == 'macos-latest'
      #   uses: melusina-org/setup-macports@v1
      # - name: Install OpenJPEG on macOS
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     port install openjpeg

      - name: Setup OpenJPEG on macOS
        if: matrix.os == 'macos-latest'
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: 'openjpeg'
          cache: yes
      - name: Install OpenJPEG on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew ls openjpeg
      - name: Set OpenJPEG on macOS
        if: matrix.os == 'macos-latest'
        
        run: |
          OPENJP2_PATH=$(find /opt/homebrew/Cellar/openjpeg/ -name "libopenjp2.a" | head -n 1)
          echo "OPENJP2_PATH=$OPENJP2_PATH" >> $GITHUB_ENV
          mkdir -p $HOME/.config/glymur
          echo "[library]" > $HOME/.config/glymur/glymurrc
          echo "openjp2: $OPENJP2_PATH" >> $HOME/.config/glymur/glymurrc
          cat $HOME/.config/glymur/glymurrc
        
      - name: Install cygwin on Windows with openjpeg
        uses: cygwin/cygwin-install-action@master
        if: matrix.os == 'windows-latest'
        with:
          packages: openjpeg findutils coreutils
      - name: Check openjpeg windows 
        if: matrix.os == 'windows-latest'
        run: |
          cygcheck -l openjpeg
      - name: Setup windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # OPENJP2_PATH=$(find /usr/lib/ -name "libopenjp2.*" | head -n 1)
          # echo "OPENJP2_PATH=$OPENJP2_PATH" >> $GITHUB_ENV
          mkdir -p ~/glymur
          echo "[library]" > ~/glymur/glymurrc
          echo "openjpeg: usr/bin/cygopenjpeg-1.dll" >> ~/glymur/glymurrc
          




        
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: View poetry --help
        run: poetry --help
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --with dev,lsm,df
      - name: Run the automated tests
        run: poetry run pytest -v
        working-directory: ./tests
